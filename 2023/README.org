:PROPERTIES:
:ID:       695e23c9-eccf-4f91-bbca-d955679a7b51
:END:
#+title: Advent of Code 2023


* Day 1: Trebuchet ?!

** Part 1

Something is wrong with global snow production, and you've been selected to take
a look. The Elves have even given you a map; on it, they've used stars to mark
the top fifty locations that are likely to be having problems.

You've been doing this long enough to know that to restore snow operations, you
need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day
in the Advent calendar; the second puzzle is unlocked when you complete the
first. Each puzzle grants one star. Good luck!

You try to ask why they can't just use a weather machine ("not powerful enough")
and where they're even sending you ("the sky") and why your map looks mostly
blank ("you sure ask a lot of questions") and hang on did you just say the sky
("of course, where do you think snow comes from") when you realize that the
Elves are already loading you into a trebuchet ("please hold still, we need to
strap you in").

As they're making the final adjustments, they discover that their calibration
document (your puzzle input) has been amended by a very young Elf who was
apparently just excited to show off her art skills. Consequently, the Elves are
having trouble reading the values on the document.

The newly-improved calibration document consists of lines of text; each line
originally contained a specific calibration value that the Elves now need to
recover. On each line, the calibration value can be found by combining the first
digit and the last digit (in that order) to form a single two-digit number.

For example:

#+begin_src src
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
#+end_src
*** Solution

For sketches on how I arrived at the more terse version below, see [[id:3ee71be7-9395-4362-902b-18269cfe13ae][elisp wisdom of the lowly]]

#+NAME: read-lines
#+begin_src emacs-lisp :noweb yes
  ;; extremely useful wesite: https://wilkesley.org/~ian/xah/emacs/elisp_read_file_content.html

  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))

#+end_src

#+begin_src elisp :noweb yes
  ;; basically we can use a divide-and-conquer type strategy
  ;; create a function with two recursive subroutines
  ;; one looks from the front, the other from the back of array (list)
  ;; the first numbers encountered are our results
  ;; so, how does this work in lisp?

  (defun getnum-lhs-rhs (str)
    ;; print the first and last numbers from a string
    ;; match the digit (will return an ascii code
    ;; convert this code to char and display
    (let* ((rstr (string-reverse str))
           (lhs (string-match-p "[[:digit:]]" str))
           (rhs (string-match-p "[[:digit:]]" rstr)))
      (string-to-number (format "%s%s" (char-to-string (aref str lhs)) (char-to-string (aref (string-reverse str) rhs))))))

  (defun test-getnum-lhs-rhs ()
      ;; should return 29 for the following string
    (setq teststr "ash2kefji3238fasjdjf0ssdfu9dfsdfh")
    (= 29 (getnum-lhs-rhs teststr)))

  (test-getnum-lhs-rhs)

  ;; Okay, with the function in mind, we basically want to map the function over lines in a buffer
  ;; Let's see if we can read this buffer, the text block below contains the
  ;; data that we want to process. This is an org-mode buffer, so it's possible
  ;; to leverage the fact that we are using blocks.
  <<read-lines>>

  (setq d1-data (read-lines "/tmp/aoc23-d1-input.txt"))
  (apply '+ (mapcar 'getnum-lhs-rhs d1-data))

#+end_src

#+RESULTS:
: 54990

In this example, the calibration values of these four lines are 12, 38, 15,
and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the
calibration values?

#+begin_src src :tangle /tmp/aoc23-d1-input.txt
2qlljdqcbeight
eight47srvbfive
slconeightfoureight557m38
xvqeightwosixnine61eightsn2tdczfhx
msixonexch1twokjbdlhchqk1
112ninejlhhjmjzkzgdsix
6six7jr
878eightgvsqvzfthree
2jxzhlkhdktxfjjleightdfpgfxjv
mxbzgzg5three
33fivehcxcxhsqhtwo
bhfive4ths1811seven
eightfxkpsqjlpjgjcp12twoxkhllqzq7
sixkvvhvgtcnjhjtmxnr7seven8
csdeightwobtsxflml4eightbxbzmvhq2four
twoplpbhq3mkkhb2
1sevenrsgrl76rqtsqqzkncrgznine
6twolnlq
nine567
qjvhrrtdqgsp8pxrlslvtwothree9three3
ninekxpninedjx7phcncpzq
onegmzclftbt8sixmkfnqpeight
one53foureightzpvseven9
315foursixonefcvttgrknrgf1
ldjx34four
fournr8ltltldqsmcd5threetwothree
seven6mffiverqgsxdxjgg6
xzsix9vnrgczsrhcnine
2sevensevenone4eight3
48jlqz
1sevenmpbvtgfivefive
8six1
4plvb
mxf2ninemkrvpseven4ms
3twojhgqlfx64two3five
8six7two
msnsone25
3dpvknhqnkpvsgrpfpfpfive2hv
4sevenrnrlndhlmmone
blzrjrgq2cmrcr2sthree5ghvlrrlxngrk
726rspnj1six6
kmlxhrff98
hnpcczfdc6hr2tworvqqkkzqld
53oneeighttwofourthree
mnbrf3fourfpbrdgltf2xbmbmrbjltdxbklsixoneightq
rzlj22gppksvxtkmd
1jdxsbn
tg8
79mfzzhctvqgk
fivethreezj45d752
hsbdxl4
fournffclthree9fourseventhree
rnlccx4
gtm8kqfourfsix
2sevenfivesevenvqshqjdvhz
zljs5twofour2three71three
61lppssjcmhchkdhbnlqznrbxkprkhrjlvgmk
xxnxtff9eightzzhpfgscgxrbkdgdvfivejgn
five2twonine745four
nqjbtrc5
one8xgcshpjfknb57
sixninevtmvnxmq1fivexsjltpxgseven
ssfzbthree8twoneqqn
2235nine
eightsixone4gf7fourckdfdvcxn
seven9zmpb
cpfthree87onellxlgjjhgshr
64threevpmszkxs
7rmxlsdqnvvmkzvjr4jjmgjrfivesixfour
4tfgdr5two1mtjbmthld5
741two
qtfive3one
kctwo4ptmgnbr8bpjrckscfour
6four6sevensixfivetpfmjvvfdt
1fivethree4two5threetmm
ptpxxkxq72sevengbn9six2
vcfhscnfplfive7seven5qnsdcgdmqzninekmhthklf
nine9znfmxkfnrqdgjh6kmninethree8
4eight3
eighttwo6threefourpqzbqfourtwonxksmbqt
638fourseven21btmxnq3
mnljhhgmcqnz4four
vhhgjdjkcqseven59
29cq4tvl8
threeonethreefive85eighteighteightwolb
kdhpb381four
4one8twoxmvzfjzbqoneightcx
ptkmzzzzfcnjfctlkpdtwotwo4
gdkzeightjbmgffzqrseight862mstxshpg
53hzzqone
slpvjsbvjkv3
6eightnine2
qcrq5one23
3hlzkglq
18pjqmlfkgsqstmnine
6twotwofqblrone
qkhdk45
sixdqkgpzrppg6dk5lgsqtwo
6four9fourpppplfcxxsevenfsqvr
hmfq83four6eightfccnjqxxh
jeight5twothreesevenqgcctwo5
39gzc75one2ncm
3zrqbgqf5hs5five2
seventwo4fzbbdndzcvdgxbchthreerchfvcbndncsv
1813n7rqnzbhqmkqonemqkjcmfz
5eightsevenlxxshdkh
pcb7twoninesix6five
eightfourjzdmcmrmjtqfdkhlmfcmnnsevenjtzch2
threeeightsixdjzrssevengnine8
zsknqnvqsx6cfqdfivezkmmgrtc
4lhkblmrpgonethree8six48five
s7gnfcfour7sspnfoureight
sixtwotwosjbskxfbjnkt3three57
ninekhhx9gp
xksttksixone9one9
eightsevenqdkqrkcsh8gtseven
eight45
qqtrfqlcdqfivevcgnzjvbl1threesngjgljkq4ctbzlsdfspc
onefoureight51rrxlffourthreekbfjmkzzvn
fivexndcxfivesixthree6gdsvsxmhq
sprbznpqhjqvh749four
hcbsdlnckk6lmhmngdrfmsbtddtxmeight
frfxfivesvprl5eightthreefourjbxtkrg
seven8two
tvndjhqx7foureightxkc3f
rfbeightwortqzmsixxcrjponerznbhx3113
jmrdxonelvlpz9three2qrklvhrbdfnpqqdhnmjlsv
2qpbcdsqtdvxmq4gqxkdptbvc
54656gl3
gnmkdm7sevenseven3four7fhrhppmtkpzvtlfqoneighth
mvggxccshsix8one
211
sixseven299
pdjeight3sixqjndl
4nvjkpqbv8seventwosevenfxhrm
9rrkjff44fivethreervt
1qqvbsfghdbttrxbpvjjbsnsevenfivetthree
fhhksevenfour215
66vqnbtonefour2qpd
spone1ninendxnqxfqvh
96hfphsnpmbx6rv
ninesevensixsix5g
7jttgkv
3gfsnineqbbfsrgpgtcjone
qtwoneeight7oneone1four
837threepzkxqfgdrml
fivejmhlvn1sevencrccgdhqzkbjt1
nine9seven5897threehmccnbldr
four24four62hrkhpf
9drdtfcvcxll28tkrjmtwo
six9kkkrhtwo
1six7eightfivenine
ninefive78twonesz
eight95
6fivefour1fivekvhqfxrc
16threefourfivesix
7zskvk9vv47pr7bpzz
pmptwo8sixqsqninensxqlrp
onehkfs9twochdn
6five8fivefivefive89
sixonefourrpxrrvlxfour4ggcpnseight
seveneightblltkljcthreeone2nine
7xmlglrghhcchqhmknzn27
4cphpdpdhxsthreetwoxgzzxvkthreethree
9kdgqtwo
5fourtmstdtone2five
gtgzkxbngmsixsone2pzrhfqfour8four
3hltczsix9kvqldhoneqrtmtmghrc
one5jdvgrlphbhone
vbns2fourqnbvfrnpr
8eightvddvoneqs
thngklbdfourpjxkhfivesevenkjbtnine3vsshx
kmbgxvpmfivevngxcr16eight
9xvvcjzcrh
9vvgrr1
three79kszslzdzlbjmd
tcst4sixfour
293four
seven9qhjpbneight29znbctmpcqxkp8
oneninethree72bkjksztwogt
five2sixn9kptcmqdtwo
pkqeightwo1plzbdmzdvt9
jxxqhcxlnkm4nvbgmj
1psqeightnine87589
threefive5jfrptftvknzsevenqtzfpmkrj
fivethree5
sixfdjjjq93vtvcsdrvpc
srvvrvbjccnine76hlfdqksheightworkk
onefoursixfive3two9vvnbmqbrncpnztqcgjmf
3sevenqtfjxcbgeightzccnfl
llnkpfsqk2
brlgeight2xblbvdlonejzqtlj
five9ktrljseven9pzfkqsrf6five
onepmbltmkkfr2
sppgk1threevzlxftfklbvkvdpsonebtbbjeightn
threeseven9
threenine1
clpfmf3fourtwofiveeightkrn
ninexhcdsbhqrrl52lmsfour
zvthreeonetseven25four2
eight2csevenncfzgkbdxb3hkrhjlsdlxmlfnv8
7xzlp
4twomsthree22324
9gzf3vfour4
7eightvdr
7sknmjmdppfkl9
5fnine7mjpdlrseven5xlghtk
1four6sevensixeight4lnvz
three1fivefive39
xkrxtzdhvf8kxscmqh
9ppk4
84threepmqzvgfhjnmbxkfgjlgnpncdf
jlf7712
qzvxgxv4gjqprxdsc26sixsixfsbfts
22ninehjq
5xn6
5pgzztrtgh
5kpdthjkfour
7six199fivefivelvmzsxq
5sixfour73fzmhsgxpbrqmbprhdq6gvpp
26two3
fnoneightdxznmf46
2threethreemskfpdsgsixseven3
d58fivecfdfivejgkknbcxfour
9qsmvtvk4gkdmlfz1
pzdgjbcktk5bfctqphc
fivemtwo382nqrbgqn8
nine96bcpxxcdbnrfivekhcqnx7six
six9eight2nine7rqjbvd
6xnkllrlphfivetwo73three
6twoninenineglgpvfheightfive
fivelxhxjqkmlhrzkz6nzdrlrfthv
vbkxjhxsf56five
7676one
22sixtsvzfsl1mqzsczrflnine7
6one1893dh
jtlvfpxnv134
2cdnxjvzpzqhthreeninerggxgxctthnzrzrghqv7vlf
8grlzfplzdpthree59threefourrlhjcsbqmz
lvxztxseven5pksrqcq82
ninedgkm97v
9sixeight1hmqhzvzgnzgrrbmfm
2three5ninefqx
45svbccvbdfstzfqmfiveeight5k4
ntwone9zctzkkpbdjthreetwovgf
8kpshzspdls8nineeighteightgqzgr
fivetchvsrqk1twosevenftz9six5
72mhgqtnpksbcvfcfivehfnhfourthreesix
694tmgkbvhf9one
2vhctqvtmqlrpvxjfive55
onefscmpn6sixoneighttt
6fbcpl13five
jztwonesix42n9gfxnone34
nineoneftmtwofour4eight
8ndt
thfivedsevenxqlqxpffsv22two
5fiveknzd1eight
fivefivesqggqcctfdhxdfzrtn9
sevenninecmxhtjshqm29922nine
79lnvct6
vtqrpdjqtbbzpjgv4eightkcpggmq37sdhbnsnkp2
7874three
ml9tpngfshkx247
four2vqzjeight9kvlmvkm
one9pczrqb7jnxvssnqngdktbcjbhhsx
5plrkfiveseven4
threespprdsklbszqxkkrcseven2
one2ncjrsrq6fgmhxpvmvnine4
hsevenmnjknphqkvseven2nineeight
rsqt9six
kvgljgskt1shjtthree
ninejtbdntj75bmxndbqvbsixrcsxbcdkbsthree
8ninepzglkbrbl54fivefour6
seven8five84sjchnqcjfzninehkqfxjvtrfive
8eightrfournine5
vkmfbd8rzjtnvfour3jsmjpsjgxnpgqb7dzcmtdg
fivedzbgnrseven2gsvhvtvffs
s2
cvcjntbhcfivethree9oneightz
7eighttwofivethreekkrhqnrseven
ninefivekxjp5
5twofive4onenine
8khbqlcsvhsevenkzp54seveneight
sixone7nine
one2gzxn88
zjzsvdnmn77
sjnzcsbbg66ctl1ninenine7nine
three3htlrblqvfgbqzldhvvhzvshfour
12drgqcqtq5
5fourlpsixonedtzkpt95xxntdcrx
73ninefiveninemrcgl
7seven6fivetwo7six
28xtpfn1
six7rt
c8four
bql2eightsevenfoursix2gjcncmjscdfive
tqxgzjfg4fourbxgsrhpfzsevenhljrjbqgrskcgprmqzkpds8
4dsjds
7jskqgjtqzfhllzjbfnninenine9cgmhkllmdj
mgmsbk85fiverzxtwold
5ncgnhqh6bmlvtg1smcb6xhkvh
f23snine
3strppjqhdtmg9gljptpjxmx
fourfcpjsfiveckmzgt482nine
3hrf1oneeight4dtxftngxvsixeightwokqc
nine2dxdmlj
fvqsltrpsixsixf2
711nine4741
three67rthree9
seven82nine8577
two5four7foursixtwo19
5twothree7cmkj
32mkgcpnh
twonine4kzrpbtcbh
eight8fourmjlpmglh6
27eightpj7xkp
dhgvjqqsqfourpvtnbcrxdznineggm2hmtrl86
2schnfh
64htzghlseven6
64eight7eightczzmmpjxhz
1rjgpkrr2sfzvjrsthree67
7onenine9eightfoursix5rzmh
3btzf5fivevzfqgmrdpvklsptlfp3
ffiveeight9
fourpdmxflnx7dxx1bzgmnht
ncmj6seven
2npbfiveqlpfzdp
onesevenngnfrv7
clqgrbzm81four5mrrkbbmlhb
828
7q68one
sevenvlsggsc7khvshfpql
r1lxgpgx2six
9crtt5ll
25nine
ftwonefiveonethreetqfbtppmpd5lzskxt4
2txtddtg782
xxtfhkcgtwothreenine8sixseven
68ctd
3n3fivefour9ninefive7
qdoneightseventwosixfivetwo8gfivenrfhvvz
rnfcxlhdktjnxpthreethree8
8schm
3zhcfive2
qptwonemnvb5
onethreefxz9
rrsbvsfour5
9nkxddqqlqzkdhbxc35krntjnpxrfour
twop1nineonefourninefive
pvgcsqxvrcrtsgtrsmrcsix2seven
237eightbszvlrjteight6
45eight
mltnhsd88rdldqqmtmd2sixthree6
3zchm2mzsmdmdqjs7one1mmpnlg
51bbtpfdjlgznfive9
onerkkczm17775seven
four63one38fivergcgtqrleight
6ggpxmvc
12six43nrcdxtdsfive5
knctwone363
fiveeight3oneeighttwo5
31fourndmngleight927two
2km2oneonenine
six7gknpdftxnq243
pvllkgzmkzfive2rmzcnrxxbghd97seven
ggpbvmlgrv3
1htjzxxhbrrtrmpnine
sixvqctcfmlz5
6fouronesevenninezfltgfour5
mcfrsgrbpsfourfiveeight8
ktrlthgxzpb6five
sevenfour8
eightfjlfcr4nineqdnvndbknmzvjhnqfhqzd7
9threeclpdskczbl
ghhst19
seven9fivetfivefivefive
eighteight5five
3eight1fivexmpstdtf
1six12
1eight4ninetwobxtkzsrlsq7
5bfour33fourzb5
9khcntftzhzthree
572nc99five
71khpfnine3tndvzmxlnkoneeightsvqc
8934chtvkqzxfive4
ninetwo2one
eighteight1six3lzkzmhvksxfm8flpjjxlckg
fourtwo8rhbdcxcmjtoneqbcqvzvh
onethreetwo28eight
twothree23fourfourvjxmdhmthbvbone
six57xgdnsevenhqs
4jjmjbtrfourfiveonesixddveightwoqm
2djdm5vgqxtsixsevenfknfzvrlkq
17twotqlkqkf17fntlcqdtbeight
foursevenonennthxkdxx9sixhlxdcntwo
qxrbhtn6kxr1cdnjktphbb
jtk2vfsqsdhcpq9eightwojsc
6ppfntdkkj3six54rdthree
six4dcchlqlvhhqqxvqxbqspttwo
six38three74nnbmmjgx7smc
dshfcone34jjhlhpsvgzpdr
lbgzbsgxq8
4vxpbhjhvzjqbdzseven686
7tgjzkrltthreexbkcrzsixsix3six
7eightkrtqvzdp92six
szkslvjxxhseven9two315xpxg
3dthreevkl7kf732
mhqs42twoseventhree69seven
mjcgnjphtk2six
xsqdccbxldfs5onenine
1threetwovgslnseven3
27five6two
fhgoneightfour8686
six6eightfour71
pvnqhcgdrtwo2hdfldftthree
threeone2vdxnkfsix
xhtwonenineseven6two4
82csvthreethree
1threemglzrkbvjzfivethree8
qkfcfourninetwofzjqq4mhcvfnx
zcvhlhhfcts13sevendjqvllmjqp
djxc55two
3gzpkjqmtzlsevensevenfour3tqs
sixggpj4five
fiveeightngstjsdoneczkg5
nine45ninegrhtnfvbtn5ffjmtscxjf
2zdrxtmcmr
4ninesix7five8cxvkktdsrpjjlhpbmprb
2twoseven
six5hlmzlm1one2qfbljtjconefour
qkqncxkpbqcqt6sixeightfiverpz
4fivesixnineeighteight7
fivethreetwo7czqhsl69
2threepkbjrfivethreensqpzkchmbgfd9lcnfchf
2zsixseveneightxlcttbrldbfthjmpzc2
gv4vzbrh45twosix
lmznsixninesixjdvhkclxdcgfzqclrxpcrljskmn7
73tmvtwo9eight3
8five9one
dkjx8nnpnfxgonethree91
rcbeightfivechrchcfzh3eight2trc
fivelnmf4threeoneqsdkmj
7fbl3fiveqgkqkhrr
2nbpg
six64onekthrflnine
2kpcfl8ninethreeldmqnxzpg83five
g484sevenrblzqhrphfsevengd
sevenqrsevencsbcqdnqzv4
59sixkk
sevenfhs3cvgjxzfft1kpqbxffhtwojst
rtqqseven1four2threefivesnjn
pzgcxqdpb9j
5fourfivethreeeightsix5threeeighteightwofs
nine7dxhdbgnn774one4
8four94rmzjknkc91
35gzlsgqgf5
seven5dvpnslnzcrxdznine
3zkbxqnpcrdkkmdkbfbv1one7
4gxlpbkjsc32htjxvzdfiveoneseven1
8vnlkmqkfmnpthree65zljcsevenhcddqgjbsj
1sevenseven6sixseven3dllmjljblc6
sixfvsqtxslmone73eight1
seven58bpbdmtwon
khptmktwotlvvh8sljppmxtm15five
qqtbmvbbdtkfmxkqhoneeight981
fiveckxltrbstq7929
foursixsix6mpzvlhcsix
four2dprpl7tjplddnpt73zxxbdcnlpdb
dh1ninefive
59hpfmhfour3qjfivenbhlkkjgp
6nhldbjxdfour4gtpfcgdsfm
cqvfivekgsxfive9qsgxnv
eight4eight7
one9gtfndld
549two2ldssk8bvsrhgstppdvj
sixone7bgxqvchcb3fivehjbclpg
6ktfxxvjhtl1
fivethree5tlhnmbqtnl241
one8gtrkrvhkqeightwot
bxhsxn4ninejvlrcgngonefiveseven9
zrqdzghqjbone5jcfsone
zqsixzsmszksx112xshfkkrfzr
twosfggctdjfour5gsvtninebjjxttrbhk5
fourtwo4vblrmtqj5
sevennine9seven1dkbcn58
8pbztltskcpl79hjgxsixztplzgc
pnine6rhdgbhfsqnconeightsss
five647
3xghrx1two9
sevenfourfour1nineeight49xnb
6eightvnfsjzjk1fivemjnz
rq9rbdt
5seven8gtrnmthj
eightone5threefiveonetbcsevenjdbm
twoonefive5eight
665one9ninecrgvnh71
3fivepscflhn8sixsfgq3
45sqcjonecxbzqfgdsix78seven
4fs
mdnkmfkj4six474
bqlhlmbg46sixthree9nine
47onetwobpxvnnzqzlj67
seventwothreefive2bgfdvchvdg515
mbveightwotwo5onethree1dmhfq35
p5kglzfkdrc3xm2threefour1
n57oneeighttwotwotftgxt
1sixz1rrpkmmbqbhdcmdsevennjlltklndztwo
jl5eighttcpczp5
m4four71
fivezkfpjrdp121vqkbhsp
mxtxcsevenfoursixszcgqtfsj5nine
three8eight
qzbgcpjj9
vhkgcrxtxtwo14sixfour7hchprqtfseven
onetwocxnq3fivejljbgv2
fiveonegcslmmgtwofivetwozrfxzpjvxljgq1
cnttseven3ninepskfours
zsj4
s5mjgshg78
fourtwoseven9threeeightgvkgdrhq
five1qvj2six
one4nlbddxrhnineth
seven4rrfconemkkpkone373
999one7b1
oneeight4tkt3
7eightk
five6seven83
nmtqmfl662phgfqfgvs3fourtwo
57qjprxmvllqgdf3lbh
sixnjjg5ltvtrggbm
fxfbhsbls17fzcctwoninetwo
eightjbsfdh5threesevenfzgqpxfvkghzntfrplpg7oneighthh
gbfivesevenonetwo4eight2
eight5eightxggnbdfvnrr
six6three6sixeightone
zrjnv5threeninefour6fivefivefive
two41two7hrpxrzhvcseventwo
4hzgjpfvknjseventwogt3
htfrtmxthn6sevenddsmdnseven
fivepqkvhnphdm8seven5fourf
395dntdk4five
7stqfkzlhmqg17one
mzlheightbjqlknkhkphxkfhcrkk17
2fivepkdhkxplcteight
5six3two4
1ninetwo
9lzsbhhjssix89
2six9sixntncshzbkflh
fourjdbq8nl1five
4fiveeightclrnzrpltwoeight42
bcfshxxkr6kzppmc4nfpzpdrfmnthreezxkjppzthree
kmpsixbvjpvdgkvgcqqtb9llfclrseven
htkhpzxbcphprzzmqthree3six9
1cnpsix8r
nslvshhkeighteighttwo3fourchvcpcfgkcseven
foureightppdqhfdzlsix4vhtpztdeightseventbfmkk
nines7nine4csfzfxlqtcxs7
nine79bp
khkeightcbqcdhthreeclfsc4fourfive1
9five93eightcjntlksdqtvneight
four3jcfpckfourvkgxpxbkqv11jqfvlgmhx
sixthree47twofivethreefive9
364eightsrlbbsrtptwofour
bxskfour4nineeightqjj
gqvsn574
six99tjcqjvdvmtbp5onenine
jpnone9
hdtwosix189bjgpfjtwo
7seven3mbrrhnfg
zsxfvhftszgjmbkxqp824
twosixgbntjknzf9kvldgqv8lx
rthgvmvfhzrqplxjbh5qjqbpzrm
phrlkkl4
twofrfmx2onerg64fqjsdxpqsixtwonetx
7eighttwoqrjf
fivefive2rzlqjkhbm86
mphzxmckxeight5zgzhkdpfhvmbdbpffive47
sl8
zggtwone82tnbvqqzpkm
7sevenxhmqzqk
hzfzrrqc93eightfour1
msztmvmgxeightninenmf97xxrdzhznkc5
8njmlqrsevenseven41bjdzxbeight
7eightonetwoxzktcgghghg
xseightwo2jpmhnttoneztczkjbnqts
onef73sevensevenmzrbvc
3hgxkfqtfourfournskgb1
5knjskch4skgbjsixone7
hflrdfourpdhlrzlnq42dmqeight5one
7ninestwo
6dvtfl
9two497
eightfnnmhs2
jbmhszmfthreeone73dqcvjqrpbnp
98seven1eight
cpqgprqcc32ninesix1eight
fiveonebvrqmf9four5
943smzjdc
9nslnjlzcbqfj
two6gxkqvghvdlgthree3
nine77seven41tqf
6threeeightninefive1sevensevend
rone4five1sevenonexxqpbsdjr
sixclgfzfjqq3
2eightsevenfnoneqdssvjkt
dhcgmvg1sevenvsqhbh
gbtdppgldnd6fgkkdgxzgeightx
fivefour5five3jmxmf5
twoone4sbsmpdtqlone
twotwo2seven7five9
zsix2nine7qhmfiveone6
zbtxdrrgqlzngnn5
64xgmvsvzdvnssixkzpdcnskfive
pcshsdtrjk5kkdcjpmmeightkvcsm
5nvvnncsevenonexln4six
eightseven5four3
zk8oneszssdfjcxlcggcnvnzqmkt6
fivefoursevenqplbeightx3
jdtgszhf9
5seven2
fxkplfive7five
4oner
two53two
v48
9foureightsevengmpthreebxth
dccdkmjhdtzpmlhx3
pdd5six1sixqgnjh94rpp
nine94vbvrmnlsnine
5kxkkltwokmzfourhmqlhrs7sjltthree
eightsvsix6nfqrcvfdx7
5vfsqkstfiveninefivesix9
4onervseventwo7
8mfsdgkppjjzdfrrqdcl7two6vtffour
hjsg2rkk8seventhree
hkbznnhhdtfourone1sixeight
one3vnntbscbzseighttwonek
fiveninenineszpkfmsevendfxfxg5
qchrrrbzlsjzk8xvjxgkvvvqns3
eightseven1
92dpjztwofourfourcrrtrpdx9
3three81gppshcns8c
9943nine8ninetppvpmz
fourmbscxpslsbtqzzmdjbsr18six
tdlbcgpq6766fiveeight
2nrnsc5eight
seveneightgzhtfourhz5
nm3ninezbbbxxpk
8sixnine6ninethree
13sfmkkct73pmncdxclnn
vgsjpmstwob64six
two7twoseven5xqxjbfqnbfivefive
1zxgnkgdkseven
sevenljnineninefvvkxznt596dghfjzgdf
1threebngjvlnninefzlbvjj
fourjndnhk2five9
8sixmhvjtvdkg
1pcgctlhkxggq6
8hfq
eight66xndjgone8seven4
nbmljkxzs5s1
bnkssmdlninefivetksfbhns7vpqt
4hjnjqccmbmnine
3rclvqqfxhlqm
gdtxcrjvrfourone8qpmxfivetvd6
8sevensix35jpdfourfdthree
1tdhsxbch
3759lg
zsxmb7one2prxjxpsix
cfjfxx4ppbqhjpvfsix
nine67fzqrqcztwo1four34
1seven6khdn6oneseveneightwoxz
kzgpsclvrn44sixvjqmhrsr
2zvqbtdxcxvgqdtrs
bt81898nfpgxrpggsone
gbveightwohqztxvbgngtwopdbdnfzbhbrjsixthree3
threejlgmfljn15
3fourone132eightvhtdssxnzfcnt
4three9d9seven
qbzj5kgglthxgv
ljttvvpqdbd4seven
9threetwo
blxpddqgeightfour4977jskbr
2fpvqbmnjlg
22tone
xrstdqhlgnrmdntxttzt1
four7ntjlbn
5mqhhtkldtwo
zfstz49two
gljszpg67
xxddtfrseven2fiveninethreemlxghjzj
mmeightwosevenzllrjkqjktgvj1gn6nmrsc9
qsdmsql8twoxdzrhhc
1cdqxhsnkkmpk1b
six9hfzfhs
threegbsnineqsixsix9jdvfour
two83fourpxnpgmnnjxdpsfgdd
eight5kftxcsevenseven59rdfpqcx
fourtwooneninesgkvbbsdq4kfvtk
ttwonepsfspjsp3
3625eighteightthree4
ninefourseven9eight4nsfmhsng
2bcfzninefivethreenine
zvsixnine2eight4hgnvzgv
52threetwoeight3
fivegvngchprmmj4tqnqvjh4three
dmkmdtrseven2onefivenineone
seven5hvtmkklsnineqgsxglsp6
ddjfrfq3lgrxkfourptxftxfc
mmtwo9five1gtrcc8
2jcqzlbthstzttllks2vlnkmpfour6
jpjtzjf2
fourgseven8
seventhreexmtpr2
82twoseven6
6bkppqrcvfourfourvqlvctgcpl5rhqcxfour
threesdcdbhjgcjhrtvseven8
664
7kxdkrdfour
3ktxgspnhrndzptfxzmrgkdp
eight9dvsbxjtrzcjk
nrrlxvddcvm361one
35
7tpmjdmqnzzpctjxl
voneightonevpkonegzzslxdjjmzvvpc73
twoone9fivefour
1ldpkzznonessixmck5
nine4grkzsmcvlzlqzqdp2nffcklvhsn92
4two9rhvrfsxvc
nineqlqxdvd9two6two9rthree
spdeight799qgt
1sixtwogzeightz3five
xcqrntvsz2frjqgnqxblnr
ninerkbrgrzqeight65txshjcrsghfbprjtgdp
fourbcgjqpjbp64four
jpt51rmpbf
7twosix8twothree3pzzdzbls
686
51fivemhnkcbpnz1lghkgdtztbtqrd4
9jkn6xtq35ninelqrsksmb9
466zqxzlsqteightsix2eightwon
7517onetwothree
5mmsppmqnnxxjvfxxxlbtwo
ninenine53gckztmtwonedb
eight6tpjdzhqd9fourzsqdpqxtf94dc
35xvpbfour
ljsfnzq5drgsbk2hlnrgsjcjn
twoone59twofrskhscjc9nine
654pntx5eightxhkzltgdz7szfvhr
seven15nine
bqpfiven9trzmqqbsl2smrh5two
eight85seven5
pkdlsckpkbtznlngsrxqdz1mhfsthree8nine
96eight
5one1nqjdcjgs9jzzsgnxtk
8rgxkmmlz
mjfmvvc6
nine4seven613
4one9two
five813
six17xphchsevenpvrmbrlmsqbnbzpmdvm
five717
jrteightninefivefour7fppstftgcqjfs
clcjgtzkgvhvn7vsix3
mzcvrvtxtf62ninetwo1one3
nineeight5five7
btrxqfqnzgcdpbtqrd1
jjjlfdjvgplnineflxpg3
foursevenvjxcv4jqqcsngcrz
cdvx9mbhcbjlnine17twosix
gzfbzdglstwothreergrxvvlblh9czslhgxpninekone
zbdxcsix5five
8bbdqzlfbsssix2
6twoone
one6twotwogv7
rfxzbsfive6mzlftvqqdj7
2eight2eightfivevmsixqllmhf
46two9
14jvrfqlskz333jbsix3
52fiveeight
hqn1three
ninenine4four
seven2two3pthreehqhbbz8rsf
fivefivextnpd7sevenkbjnnlsixninetnvjrllf
nine2fivecxttgcsbqvjgxj
twotwofjndhnfzscgxfjqxklmbtmhvdjtbrknfive1
cqdhhscnone9eight4lvgbrnfgcbbfour
srjqtfpvnjkbqdrm26srzrtk
sevenonefourseven2
3tlhfd
fourqsnlsfiveeight5gngdxvvbone2
qslkxd6
6jxgvknvbbbmqbjkkbnineninenjnkxnbpvf
tzxrgthree8sixtzszjscq
dcjgzzrnlx237887xvnkbg
mpqpxsix8dssfkt5sixqshsqpsbghqvvt
qrjoneightqqpf8
v1
fivefourgpkqbmhzkdtmxnrrkjq1jrlj
4vdcdcsseightxdskczksldfour31dlgcpq
four6six
bzztktdmdnine2seven34
sixone464
zjbctfournineninenmgssix7
fourddspxzcsixlfourphtfpcvcjxhmkbkfqszjqdkk8
coneight3kxqnknpgfqmcbfhrmspv1
4cxrd5eightfivezbkkbvxmklzhbg
3gzhthqlvgklrsvzlrldxeight
twoseven4eightpgzmdjmthreethree
zrvdone9eightjfddpv5
onenkrdbvsfdd8dxtfjrkvlldbltqthreectgseven
xrrrtshfourxsznhllcnljggnf8
18fivethreethree
twosevensix62bjjfqbgfour1
sixhvmrjsxbtvpttnvsvkkdjbrkz8
63seventwofive6nj
tworpmdqcdjfknine5zbbctfdxjfivepsbls
8onebcffzl
six4eight
534zclfpftggfzj3
5threespcbkb
qjvmhltqtvxkntwo3mmnqjtc1msmcrvdsixb
lnlkdvhsgdslmlkdmzgfdtjmldxpp4
fiveninetmktpq7frcksixsixjxfmgkpcx
seven7xlqzjkmpr
1pdbjpbjldpxfgzjgch8
6two361vbtzntk
sevenfourfivefivethreesq19five
xhvmcfzqvmlplc6xgsxgzhjfsvhzr6sevenbzhchqqxvq
ninehmc7mgcspncsm
84gtvlrxx23
2lllgqjlntgctxrpvhhmxgtzpg
6twosevenvpgngr7
ppjmthreetrnbrzd6two5lqnmhj
1eightfourtwo93
lg7nine8three18
onecp3
8hnqgvgrfk8fivedgjqcmht9
bcfmtxzgkjsfffntwoglcqj9
bconeight5vqkndkxxpsevenfiverxvdf
826
dgdfjnbq2
9hkrnrstvjonephgsh4
sevenrmmnhhzqpxvpns7vbfjxsixtdvvzcd
nine93pbhzvpzkxfourfive3
9bhplv5ljnzxzj4d6tzdzk
ninenjq6six
frthreefzzxkjv3fivesixeighteight
1zmbmqlgxtwoltfxfncckxkznine
qfh2fiveq6sjvbtrc
2twojbzgbqp2
58fzjtzrmzrtnhsix7seven
76seven
1nine685rhlltpqmonetwolfqbnbz
lhlnzjvptsix1one19fiveqvc
mxlnjnkpcjcl9seven
gseightwo6
hmfour9zxscbsix
15hx
lxrptwo6four23brqnsmpnv1six
sevenj486
1kdt57four
threefourqsjjfmqzgm7
rlkfjspbb79eightlgsb78
273sixninelpbfnjkrlninethree
6xkrjrqthree8
fourthreehtone11jmjt
1hpfqhtkglk
nine15hjn3nbrteightwoxst
9jrphvqgqfour22one
threerdrvrgkvr2
1bhqngdlfqpltwo7
four8threegbkpthree
fouronejeight2
two1ks69367two
brtm64ljnqpnnkxxpdneight
nine6rcsixtwoninethreesix
ninetpmbdnine8
rhkrrrvslxz6seventhreethreenine7five
11vm51fvzgthjdcxb44
5crqfourkksdcbxhhgndmqkxrthree
qmmnpdm67
shrdmggszgxknp9msixkkppzbheight
6jllfcrhseven28lhfxbqone
rblgzsfxhtdkfoursix38hl
nine5rkjvchtnsrsevencrhvmfourgsix9
fourmgz9
four2rvftpfng
s5ctjmqhtfqbknrvhnb7
fgdprp1sjkhdccmtbninethreeeight
7xj3vone
hlh6rlpsscd
8nmrzdrjbcp9fdvsix7zmfzx5
2eight2jztrnx2vbkkbqxpdbgxqmhtnxbjs
1gxkrbnxvcpr6eightbtnptvzczp2
kktm5seven82onehkkgsevenczfpgz
skmkfthree538zzmjd19
eight61onezsevenbone
28eightonesix7onenine
hh61lfspfx4fvtxqshzchllphnkz5seven
9kfkz
8fiveseven33j6nine7
7xkvvtxvtmltpv
xxjpndkcbbhkrqc4fivenine1
2tvpthree4onelbqkeightzdvvxseven
sixsix7
5eightjmrxhghb79tworqfour
snbgknvfctggnteightthreenine5
two6nine
rsc23sgztzmkvnqqnsevenfour2
9tcdqdcccjldfvxttvhtnbtzm
8sxthstcmonefive6one193
fdppcjkrptxbmvvmlhthreevzsxqcrmzl8
onedxjg8rvqdszg7
9vsvctbbm
ffpxgrtwodbnpvfckbb8rjfmpngp7six
8ljxjseventwoeight66
threelzhqgtzfljdjcddsix5nhtzbvrpdprxdtgcql
gnkkcdbtcd4
5fiveslqchsix3
6zfxp
5758ffddzjxjr4nzgqllfive
386threebhfpxsvn2tncfcjbrlv
vth77897ninesix
six2hbbrlggsixbtzctqdmjsixphvtnxfphmmmkscg
jszfbjvsthreefive8eight28hpfztclxczsgnksgchd
vdlfxdfhgfourfivelzxlhmhng1krv1
1rfsfiveeightsevenseven
dxzbfive7
ctcgsevenqcrgscpqgvxglqfgckzbdn7hvzpg
5zcfrbsdgqbbzkgfrgtg4four6
six5ninesevenfour
gszmtz5pzxrgnzfxtvcnnhznhplg7fivetwo
fivegdxbmxxgmkqxgfv9jtkcnfour1sevenr
2ninetwoxtmtf4gjbm7xdq
9hfshgqrvmheightsix96
fqjrlq27pqqbxjqtwo
threefour44dsjtdhm9chjx8vrsp
fourthreeqz1nine
3ftjxdfxp
sixsixone2oneone
ninesix55
five24seven
6ninejrvzccxxgq
n46tsseight
nineseven44three
nsstnhvdkxnbsrpnxfknbjffpngz36twofiveseven
4sixxqrngkhxbktwocnnjqphcdceightsl
knqmkjnrseventhree9eightjfjl6lmjfddg
42eightdvrlrzhsix4
1bzqrcmb1krmhtwo
845sixslqxh49
four2jtndvcfhnmfourjmcjlxtjkzfour
65z
twocxpqljhdmnjdnine62svmmfdhhrzdznf
827
52threebrhssdltmrthkvqfm6kgh
fjqntgg8ninexxxdmxhgfivexnvxv
three96
51rtc8threeeight
mrqpvstpsjhb98nine
nqzrgxhvjzqblvsbhtssrzkvmrppkqfnrvpsltseven74
bhgnxlpfkrseven2onebjxxxqnkkd4
onesevenzxxninefcghtwoqvrgmsthree7
four5ffourzcmshx
f6gqhvfp55cpb3six
7eighttlqzvggsksix1lbxdbrfivebfgznsck
dtsgq2seven89four3five
4mcstshfive8eight92
vfnlxhf99fivenkcqlrttwov
96vjxjvmzpqtwo
5kffpqfour2kfour6
5dsz2fjkvzkpgstfive7six6
fourlmzvktshjpgqnhq3673nine
3svfczsvvnfour61
k2jfhgf
7vmhmsv7three6three8phqbcm
cfjktbxhsixeight9
zqmseven3four6
2four4eightskhbeightvrone
51tcrbl6ninezvhckfxqphcd
xnntnqstwoeight3twoonefour4nine
sixfiveninefiveksxspqthree4
sgtwo7
97tdzhqdxtqctksix
3fiveeightfour
fivemsjhxqpgbt3eightk9
four698ninef
3nkqmpmg7eight
7gksfive
41nine
rflzmfs1
nszxcthree8hsqqmhfive2
jbhkgkgjtd4rpnzjrhqfournznljmhvjtnzsix
six83
81btctxpmvmnine7
qqqnnkq7five
foureight6
crjgvsjxcpgtx8one
nvfive8hvdth6fgnfgh
8hl5eight
#+end_src


** Part 2

Your calculation isn't quite right. It looks like some of the digits are
actually spelled out with letters: one, two, three, four, five, six, seven,
eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last
digit on each line. For example:

#+begin_src src :tangle /tmp/aoc23-d1p2-test.txt
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
#+end_src

In this example, the calibration values are 29, 83, 13, 24, 42, 14,
and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

*** Solution

See [[id:3e7ddeac-7c67-492a-99e0-c5e9b6bf18ed][lisp: higher order functions]] for details of how the following code works.


**** truth table for comp-points

| cnums-empty | wnums-empty | action              |
|-------------+-------------+---------------------|
| t           | t           | exit early with nil |
| t           | nil         | process wnums       |
| nil         | true        | process cnums       |
| nil         | nil         | comp-points         |



#+begin_src emacs-lisp :noweb yes :tangle /tmp/aoc23-d1p2.el
  (setq lexical-binding t)

  (defun sum-calibration-vals (cal-lst)
      (apply '+ (mapcar 'parsenum-lhs-rhs cal-lst)))

  (ert-deftest ert-test-sum-calibration-vals ()
    (should (eql (sum-calibration-vals '("two1nine"
                                         "eightwothree"
                                         "abcone2threexyz"
                                         "xtwone3four"
                                         "4nineeightseven2"
                                         "zoneight234"
                                         "7pqrstsixteen"))
                 281)))

  (defun parsenum-lhs-rhs (str)
    ;; read a string, parse it for the first lhs and rhs occurrence of a number
    ;; numbers can be either in a single char or a number spelled out as word
    ;; which every one of these comes first is the one we use.
    ;; print the first and last numbers from a string
    ;; match the digit will return an ascii code
    ;; convert this code to char and display
    (defun result-num (res-lhs res-rhs)
      (string-to-number (format "%d%d" res-lhs res-rhs)))

    (let ((res-pair (comp-points (getnums str 'matchnum-char-lhs 'matchnum-char-rhs)
                                 (getnums str 'matchnum-word-lhs 'matchnum-word-rhs))))
      (result-num (car res-pair) (cdr res-pair))))

  (ert-deftest ert-test-parse-lhs-rhs ()
    (should (equal (parsenum-lhs-rhs "eighthree") 83))
    (should (equal (parsenum-lhs-rhs "two1nine") 29))
    (should (equal (parsenum-lhs-rhs "eightwothree") 83))
    (should (equal (parsenum-lhs-rhs "abcone2threexyz") 13))
    (should (equal (parsenum-lhs-rhs "xtwone3four") 24))
    (should (equal (parsenum-lhs-rhs "4nineeightseven2") 42))
    (should (equal (parsenum-lhs-rhs "7pqrstsixteen") 76))
    (should (equal (parsenum-lhs-rhs "zoneight234") 14)))


  (ert-deftest ert-test-comp-points ()
    (should (equal (comp-points
                    (getnums "1two3four" 'matchnum-char-lhs 'matchnum-char-rhs)
                    (getnums "1two3four" 'matchnum-word-lhs 'matchnum-word-rhs))
                   '(1 . 4)))
    (should (equal (comp-points
                    (getnums "twotwo" 'matchnum-char-lhs 'matchnum-char-rhs)
                    (getnums "twotwo" 'matchnum-word-lhs 'matchnum-word-rhs))
                   '(2 . 2)))
    (should (equal (comp-points
                    (getnums "notanything" 'matchnum-char-lhs 'matchnum-char-rhs)
                    (getnums "notanything" 'matchnum-word-lhs 'matchnum-word-rhs))
                   '(nil . nil)))
    (should (equal (comp-points
                    (getnums "three4" 'matchnum-char-lhs 'matchnum-char-rhs)
                    (getnums "three4" 'matchnum-word-lhs 'matchnum-word-rhs))
                   '(3 . 4)))
    (should (equal (comp-points
                    (getnums "eightwothree" 'matchnum-char-lhs 'matchnum-char-rhs)
                    (getnums "eightwothree" 'matchnum-word-lhs 'matchnum-word-rhs))
                   '(8 . 3)))
    (should (equal (comp-points
                    '(("lhs" nil) ("rhs" nil))
                    '(("lhs" 0 . 8) ("rhs" 7 . 3)))
                   '(8 . 3))))


  (ert-deftest ert-test-getnums ()
    (should (equal (getnums "eighthree" 'matchnum-word-lhs 'matchnum-word-rhs) '(("lhs" 0 . 8) ("rhs" 4 . 3))))
    (should (equal (getnums "1two3four" 'matchnum-char-lhs 'matchnum-char-rhs) '(("lhs" 0 . 1) ("rhs" 4 . 3))))
    (should (equal (getnums "1two3four" 'matchnum-word-lhs 'matchnum-word-rhs) '(("lhs" 1 . 2) ("rhs" 5 . 4))))
    (should (equal (getnums "onetwo33" 'matchnum-char-lhs 'matchnum-char-rhs) '(("lhs" 6 . 3) ("rhs" 7 . 3))))
    (should (equal (getnums "1two" 'matchnum-word-lhs 'matchnum-word-rhs) '(("lhs" 1 . 2) ("rhs" 1 . 2))))
    (should (equal (getnums "deadbeef" 'matchnum-char-lhs 'matchnum-char-rhs) '(("lhs" nil) ("rhs" nil))))
    (should (equal (getnums "deadbeef" 'matchnum-word-lhs 'matchnum-word-rhs) '(("lhs" nil) ("rhs" nil))))
    (should (equal (getnums "eightwothree" 'matchnum-word-lhs 'matchnum-word-rhs) '(("lhs" 0 . 8) ("rhs" 7 . 3)))))

  (ert-deftest ert-test-nums-not-found ()
    (should (eql (nums-not-found test-cnums) nil))
    (should (eql (nums-not-found test-wnums) nil))
    (should (eql (nums-not-found test-nilnums) nil)))


  (defun comp-points (cnums wnums)
    ;; compare the points given a side of two pairs
    ;; compare two (POS . INT) pairs
    ;; find the first valid positions for lhs and rhs
    ;; return a new pair of (INT . INT) values representing the outermost matches
    (defun getpos (pair)
      (car (cdr pair)))

    (defun getint (pair)
      (cdr (cdr pair)))

    (defun compare-lhs (cnums wnums)
      (let* ((cnums-lhs (assoc "lhs" cnums))
             (wnums-lhs (assoc "lhs" wnums)))
        (if (or (not cnums-lhs) (not wnums-lhs))
            '(nil)
          (if (< (getpos cnums-lhs)
                 (getpos wnums-lhs))
              (getint cnums-lhs)
            (getint wnums-lhs)))))

    (defun compare-rhs (cnums wnums)
      (let* ((cnums-rhs (assoc "rhs" cnums))
             (wnums-rhs (assoc "rhs" wnums)))
        (if (or (not cnums-rhs) (not wnums-rhs))
            '(nil)
          (if (> (getpos cnums-rhs)
                 (getpos wnums-rhs))
              (getint cnums-rhs)
            (getint wnums-rhs)))))

    (defun numpair-valid-p (pair)
      (if (and (getint (assoc "lhs" pair))
               (getint (assoc "rhs" pair)))
          t
        nil))

    (let* ((cnums-p (numpair-valid-p cnums))
           (wnums-p (numpair-valid-p wnums)))                    
      (if (and cnums-p wnums-p)
          (cons (compare-lhs cnums wnums)
                (compare-rhs cnums wnums))
        (if (or cnums-p wnums-p)
            (if cnums-p
                (cons (getint (assoc "lhs" cnums))
                      (getint (assoc "rhs" cnums)))
              (cons (getint (assoc "lhs" wnums))
                    (getint (assoc "rhs" wnums))))
          nil))))

  ;; see higher order functions in notes
  (defun getnums (str mnum-fn-lhs mnum-fn-rhs)
    ;; Find the first instances of digit characters
    ;; Return an association list
    (let* ((res-lhs (funcall mnum-fn-lhs str))
           (res-rhs (funcall mnum-fn-rhs str))
           (res `(("lhs" . ,res-lhs)
                  ("rhs" . ,res-rhs))))
      res))


  ;;(getnums "onetwo3four5" 'matchnum-char-lhs 'matchnum-char-rhs) ;; (("lhs" 6 . 3) ("rhs" 11 . 5))
  ;;(getnums "onetwo3four5" 'matchnum-word-lhs 'matchnum-char-rhs) ;; (("lhs" 0 . 1) ("rhs" 11 . 5))

  (defun matchnum-char (str match-fn)
    ;; Matches the first character containing a digit
    ;; Returns a (POS . INT) pair
    (let* ((idx (funcall match-fn "[[:digit:]]" str)))
      (if (not idx)
          '(nil)
        (let ((knum (and idx (match-string 0 str))))
          (cons idx (string-to-number knum))))))

  (defun matchnum-char-lhs (str)
    ;; Find the first match
    (funcall 'matchnum-char str 'string-match))

  (defun matchnum-char-rhs (str)
    ;; Find the last match
    (funcall 'matchnum-char str 'last-index-of))

  (defun matchnum-word (str match-fn)
    ;; Match a number as word
    ;; make an regular expression out of a list of strings, then use the expression
    ;; to match the first occurrence of a number in a string
    ;; Before returning, the match is converte to an integer
    ;; returns a (POS . INT) pair 
    (setq nums '(("one" . 1)
                 ("two" . 2)
                 ("three" . 3)
                 ("four" . 4)
                 ("five" . 5)
                 ("six" . 6)
                 ("seven" . 7)
                 ("eight" . 8)
                 ("nine" . 9)))
    (let* ((renum (regexp-opt '("one" "two" "three" "four" "five" "six" "seven" "eight" "nine")))
           (idx (funcall match-fn renum str)))
      (if (not idx)
          '(nil)
        (let ((knum (and idx (match-string 0 (substring str)))))
          (cons idx (cdr (assoc knum nums)))))))

  (defun matchnum-word-lhs (str)
    ;; Return (POS . INT) first match
    (matchnum-word str 'string-match))

  (defun matchnum-word-rhs (str)
    ;; Return (POS . INT) last match
    ;; we would improve this by making the search recursive, slowly build up the string from right to left
    (matchnum-word str 'first-index-of-rhs))

  (defun first-index-of-rhs (regex str)
    ;; iterate throught string from right hand side
    ;; check increasingly large slices for matches containing regex
    (let* ((rh-idx (string-width str))
           (init-from (- rh-idx 1)))
      (defun iter-fio-rhs (idx count)
        (let ((res (string-match regex str idx)))
          (if (and (not res)
                   (<= count rh-idx)) ;; keep looking
              (iter-fio-rhs (- idx 1) (1+ count))
            (and res idx))))
      (iter-fio-rhs init-from 0)))

  (first-index-of-rhs "\\(?:eight\\|f\\(?:ive\\|our\\)\\|nine\\|one\\|s\\(?:even\\|ix\\)\\|t\\(?:hree\\|wo\\)\\)" "eighthree")
  (first-index-of-rhs "\\(?:eight\\|f\\(?:ive\\|our\\)\\|nine\\|one\\|s\\(?:even\\|ix\\)\\|t\\(?:hree\\|wo\\)\\)" "one")
  (first-index-of-rhs "\\(?:eight\\|f\\(?:ive\\|our\\)\\|nine\\|one\\|s\\(?:even\\|ix\\)\\|t\\(?:hree\\|wo\\)\\)" "nothing")

  (ert-deftest ert-test-first-index-of-rhs ()
    (let ((tregex (regexp-opt '("one" "two" "three" "four" "five" "six" "seven" "eight" "nine"))))
      (should (eql (first-index-of-rhs tregex "eighthree") 4))
      (should (eql (first-index-of-rhs tregex "onesdfji") 0))
      (should (eql (first-index-of-rhs tregex "nothing") nil))
      (should (eql (first-index-of-rhs tregex "one") 0))))

  (ert-deftest ert-test-matchnum-word-rhs ()  
    (should (equal (matchnum-word-rhs "oneight") '(2 . 8)))
    (should (equal (matchnum-word-rhs "eighthree") '(4 . 3))))

  (ert-deftest ert-test-matchnum-word-lhs ()
    (should (equal (matchnum-word-lhs "oneight") '(0 . 1)))
    (should (equal (matchnum-word-lhs "eighthree") '(0 . 8))))

  
  (defun last-index-of (regex str &optional ignore-case)
    ;; Function that returns the index of last match of a regex in a string
    ;; stackoverflow 27996264/lastindexof-using-regex-in-elisp
    (let ((start 0)
          (case-fold-search ignore-case)
          idx)
      (while (string-match regex str start)
        (setq idx (match-beginning 0))
        (setq start (match-end 0)))
      idx))

  <<read-lines>>

  (setq d1p2-test (read-lines "/tmp/aoc23-d1p2-test.txt"))

  (sum-calibration-vals d1p2-test)
  (sum-calibration-vals (read-lines "/tmp/aoc23-d1-input.txt"))

#+end_src

#+RESULTS:
: 29



* Day 2: Cube Conundrum

You're launched high into the atmosphere! The apex of your trajectory just
barely reaches the surface of a large island floating in the sky. You gently
land in a fluffy pile of leaves. It's quite cold, but you don't see much
snow. An Elf runs over to greet you.

The Elf explains that you've arrived at Snow Island and apologizes for the lack
of snow. He'll be happy to explain the situation, but it's a bit of a walk, so
you have some time. They don't get many visitors up here; would you like to play
a game in the meantime?

As you walk, the Elf shows you a small bag and some cubes which are either red,
green, or blue. Each time you play this game, he will hide a secret number of
cubes of each color in the bag, and your goal is to figure out information about
the number of cubes.

To get information, once a bag has been loaded with cubes, the Elf will reach
into the bag, grab a handful of random cubes, show them to you, and then put
them back in the bag. He'll do this a few times per game.

You play several games and record the information from each game (your puzzle
input). Each game is listed with its ID number (like the 11 in Game 11: ...)
followed by a semicolon-separated list of subsets of cubes that were revealed
from the bag (like 3 red, 5 green, 4 blue).

For example, the record of a few games might look like this:

#+begin_src 
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
#+end_src

In game 1, three sets of cubes are revealed from the bag (and then put back
again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red
cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.

The Elf would first like to know which games would have been possible if the bag
contained only 12 red cubes, 13 green cubes, and 14 blue cubes?

In the example above, games 1, 2, and 5 would have been possible if the bag had
been loaded with that configuration. However, game 3 would have been impossible
because at one point the Elf showed you 20 red cubes at once; similarly, game 4
would also have been impossible because the Elf showed you 15 blue cubes at
once. If you add up the IDs of the games that would have been possible, you
get 8.

Determine which games would have been possible if the bag had been loaded with
only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs
of those games?

** Input

#+begin_src src :tangle /tmp/aoc23-d2.txt
Game 1: 5 red, 1 green, 2 blue; 2 green, 8 blue, 6 red; 8 red, 3 blue, 2 green; 6 red, 1 green, 19 blue; 1 red, 17 blue
Game 2: 4 red, 5 green, 2 blue; 7 red, 14 green, 3 blue; 2 green, 5 blue, 11 red; 10 blue, 3 green; 9 green, 6 blue, 13 red; 7 red, 5 green, 9 blue
Game 3: 9 green, 18 blue, 1 red; 6 red, 10 blue, 5 green; 4 blue, 4 red, 15 green
Game 4: 1 red, 13 green; 10 green, 2 red; 3 red, 4 green, 2 blue
Game 5: 4 red, 2 green, 1 blue; 4 red, 9 blue; 4 green, 1 red, 6 blue; 3 blue, 2 green, 6 red; 5 red, 4 green, 1 blue
Game 6: 6 red, 3 green, 6 blue; 3 green, 5 blue, 12 red; 3 green, 9 blue, 3 red; 13 red, 8 blue
Game 7: 3 blue, 1 red; 3 blue, 10 green; 4 green, 5 blue
Game 8: 11 green, 4 blue; 4 red, 4 blue, 11 green; 4 green, 3 blue; 1 blue, 6 red, 12 green
Game 9: 1 blue, 4 green, 1 red; 5 green, 3 blue; 9 green, 4 blue; 3 blue, 1 red, 10 green; 6 green, 2 blue
Game 10: 5 green, 6 red, 7 blue; 7 green, 5 blue, 5 red; 8 red, 6 blue, 8 green; 2 blue, 8 green, 6 red; 6 blue, 8 red, 4 green
Game 11: 1 blue, 10 red, 10 green; 11 green, 2 blue, 16 red; 4 blue, 7 red, 14 green
Game 12: 8 green, 9 red, 12 blue; 2 green, 4 blue, 7 red; 1 red, 9 blue, 7 green; 8 green, 2 red, 10 blue; 1 green, 5 red, 5 blue; 6 green, 5 red, 1 blue
Game 13: 3 green, 1 blue, 6 red; 1 green, 10 red; 1 blue, 15 red, 2 green
Game 14: 2 green, 6 blue; 1 green, 2 blue, 2 red; 5 blue, 1 green, 2 red; 4 green, 5 blue, 4 red; 4 red, 5 green, 4 blue; 1 red, 5 green, 6 blue
Game 15: 12 green, 7 blue; 19 green; 11 blue, 16 green, 1 red; 1 red, 2 green, 3 blue; 8 blue, 1 red, 19 green; 14 blue, 3 green, 1 red
Game 16: 2 green, 13 blue, 3 red; 5 red, 12 blue; 6 blue, 8 red; 4 red, 1 green, 4 blue; 1 green, 15 blue; 4 blue, 2 green, 1 red
Game 17: 11 blue, 7 green, 2 red; 12 red, 8 green, 8 blue; 2 red, 6 blue, 6 green
Game 18: 1 green, 2 blue; 2 green, 1 blue, 4 red; 3 green, 16 red; 2 red, 3 green
Game 19: 11 blue, 3 green, 3 red; 11 blue, 5 green; 3 green, 3 red, 8 blue
Game 20: 1 green, 6 blue; 4 blue, 6 green; 1 red, 10 green; 12 green; 5 blue, 1 red, 4 green; 1 green, 5 blue
Game 21: 7 green, 3 blue; 1 red, 5 blue, 6 green; 1 red, 11 green; 8 blue, 1 red, 10 green; 1 red, 5 blue, 3 green
Game 22: 3 red, 1 blue; 3 green, 1 red, 1 blue; 7 green, 2 blue
Game 23: 12 green, 1 red, 2 blue; 10 blue, 1 green, 1 red; 9 blue, 8 green
Game 24: 5 blue, 6 green, 6 red; 3 blue, 1 red; 8 blue, 2 green, 12 red; 1 green, 2 blue, 14 red; 2 blue, 5 green, 15 red
Game 25: 6 red, 13 green; 1 blue, 1 red, 3 green; 1 blue, 12 red, 10 green
Game 26: 16 red, 2 blue, 7 green; 1 blue, 7 green, 8 red; 1 blue, 3 red, 9 green
Game 27: 4 blue, 15 green; 6 green, 2 blue, 1 red; 9 blue, 10 green, 4 red; 3 red, 3 green, 6 blue; 11 blue, 7 red, 11 green; 6 red, 5 green, 13 blue
Game 28: 10 blue, 8 red, 10 green; 4 blue, 11 red, 6 green; 8 red, 9 green, 10 blue; 4 red, 9 green, 2 blue
Game 29: 4 red, 9 green, 7 blue; 10 blue, 6 green, 4 red; 1 green, 2 red, 10 blue; 3 green, 9 blue
Game 30: 6 blue, 9 green, 10 red; 6 blue, 4 red; 5 green, 2 blue; 5 green, 2 red, 2 blue; 6 blue, 8 green
Game 31: 7 blue; 2 green, 6 blue; 1 red, 9 blue, 5 green
Game 32: 8 blue, 2 red, 4 green; 6 red, 2 blue, 1 green; 14 blue, 8 green, 8 red
Game 33: 1 green, 1 red, 1 blue; 2 blue, 1 green, 12 red; 1 green, 1 red; 1 blue, 2 red, 1 green; 7 red, 2 green, 2 blue
Game 34: 3 blue; 2 blue; 10 red, 1 blue, 1 green; 5 red; 1 green, 1 red, 1 blue; 1 green, 2 red
Game 35: 10 green, 1 red, 16 blue; 4 red, 10 blue, 9 green; 1 green, 7 blue, 5 red
Game 36: 1 blue, 3 red, 16 green; 1 blue, 3 red, 1 green; 9 green, 3 red, 8 blue; 14 green, 6 blue, 3 red; 3 red, 12 green, 4 blue
Game 37: 11 red, 3 blue; 15 red, 8 blue, 6 green; 6 green, 19 red, 11 blue; 1 green, 4 blue, 14 red; 12 blue, 5 red, 8 green; 4 blue, 9 red
Game 38: 4 green, 10 blue, 3 red; 1 green, 1 red, 11 blue; 2 red, 12 blue
Game 39: 3 green, 1 red, 4 blue; 9 green, 1 red, 18 blue; 4 red, 4 green, 17 blue; 4 red, 10 blue, 14 green
Game 40: 5 red, 4 green, 8 blue; 1 green, 9 blue; 9 blue, 3 red, 6 green; 8 red, 9 blue, 9 green
Game 41: 1 blue, 9 red, 3 green; 9 red, 10 green, 15 blue; 13 red, 8 green, 8 blue; 19 red, 6 blue, 2 green; 7 green, 5 blue, 12 red
Game 42: 15 blue; 1 red, 1 green, 9 blue; 6 blue, 1 red; 1 green, 4 blue
Game 43: 1 green, 8 blue, 2 red; 1 red, 1 green, 6 blue; 7 blue; 7 blue, 3 red, 1 green; 2 red, 5 blue
Game 44: 7 green, 11 blue, 6 red; 9 green, 8 blue; 4 red, 15 green; 12 green, 14 blue, 8 red
Game 45: 4 red, 4 green; 14 green; 4 green, 2 blue; 1 blue, 12 red, 5 green; 3 red, 6 green; 11 red, 1 green
Game 46: 2 blue, 1 green, 1 red; 1 blue, 6 green, 1 red; 2 blue, 1 red, 1 green; 5 green
Game 47: 1 blue, 1 red; 14 red; 3 green, 2 blue, 17 red; 4 green
Game 48: 1 red, 11 green, 2 blue; 1 red, 11 green, 6 blue; 13 green, 1 blue, 3 red; 3 green, 4 red, 6 blue; 12 green, 5 blue, 1 red; 2 red, 4 green, 4 blue
Game 49: 5 blue, 3 green; 2 green, 8 blue; 5 blue; 4 green, 5 blue, 1 red; 4 green, 7 blue; 1 green, 3 blue
Game 50: 3 red, 5 green, 2 blue; 9 green, 7 red, 4 blue; 3 blue, 6 red, 13 green; 6 blue, 8 red, 9 green
Game 51: 2 green, 11 red, 7 blue; 5 blue, 13 red; 1 green, 2 blue, 3 red; 6 blue, 8 red; 11 red, 2 green, 4 blue
Game 52: 15 blue, 1 green, 4 red; 4 green, 10 blue, 2 red; 6 red, 18 blue, 1 green
Game 53: 2 red, 10 green, 6 blue; 4 green, 3 blue, 3 red; 17 blue, 19 green, 5 red; 6 blue, 6 green, 9 red; 5 blue, 17 green, 7 red
Game 54: 9 blue, 8 red, 6 green; 6 red, 8 green; 1 green, 6 blue, 1 red; 5 red, 4 green, 9 blue; 5 blue, 2 green, 5 red
Game 55: 8 blue, 8 red, 10 green; 3 red, 4 green, 9 blue; 4 red, 3 green, 7 blue
Game 56: 3 red, 6 green, 1 blue; 5 green, 1 blue, 1 red; 1 red, 2 green; 10 green
Game 57: 1 green, 4 blue, 12 red; 17 red, 7 blue, 10 green; 17 red, 5 blue, 3 green
Game 58: 1 red, 5 green, 14 blue; 5 green, 6 red, 7 blue; 4 blue, 8 green; 3 red, 9 green, 7 blue; 8 blue, 8 green, 6 red; 8 green, 7 blue, 5 red
Game 59: 3 green, 5 red; 2 red, 13 green, 1 blue; 19 green, 1 red, 1 blue; 19 green, 1 blue; 18 green, 1 blue, 5 red; 6 red, 9 green
Game 60: 5 red, 1 green, 6 blue; 8 red, 6 blue, 14 green; 8 green, 8 red, 3 blue; 2 blue, 5 green, 3 red; 4 blue, 1 red, 14 green
Game 61: 7 red, 4 blue, 2 green; 2 green, 8 red, 9 blue; 5 blue, 2 green, 8 red; 8 red, 1 green, 8 blue
Game 62: 6 red, 3 blue; 1 blue, 2 red, 2 green; 3 red, 1 blue
Game 63: 2 red, 1 blue, 2 green; 1 blue, 1 green; 2 green, 4 red; 3 green, 2 red; 2 green
Game 64: 5 green, 6 blue, 7 red; 2 red, 5 green, 8 blue; 7 green, 9 blue, 1 red; 4 green, 5 blue; 19 blue, 5 green, 13 red
Game 65: 3 red, 1 blue, 4 green; 5 green, 3 blue; 9 green, 1 red, 10 blue
Game 66: 6 red, 13 green, 2 blue; 2 blue, 5 red, 9 green; 18 red; 2 green, 1 blue, 1 red; 19 red, 10 green; 1 blue, 15 green, 13 red
Game 67: 8 blue, 3 red; 1 red, 12 green, 7 blue; 4 red, 6 blue, 5 green; 11 green, 10 blue, 7 red; 5 red, 9 green, 14 blue
Game 68: 1 red, 3 green; 10 blue, 1 red, 3 green; 1 green, 17 blue; 16 blue; 6 blue
Game 69: 11 green, 5 blue, 8 red; 2 red, 5 green, 1 blue; 10 green, 2 blue; 11 green, 7 red, 4 blue
Game 70: 2 green, 1 blue, 13 red; 16 green, 20 red, 4 blue; 10 red
Game 71: 10 blue, 6 green, 7 red; 5 red, 5 green, 2 blue; 7 green, 4 red, 5 blue; 1 red, 8 blue; 5 red, 1 blue, 8 green; 5 blue, 1 red, 5 green
Game 72: 2 red, 4 green; 2 green, 2 red, 1 blue; 3 blue, 3 green, 2 red; 2 green
Game 73: 5 red, 19 blue; 12 blue, 4 green, 16 red; 14 red, 11 blue, 1 green
Game 74: 2 red, 1 green, 9 blue; 5 blue, 1 green, 2 red; 2 green, 1 red, 13 blue; 2 green, 1 red, 3 blue
Game 75: 7 blue, 1 red, 18 green; 17 green, 8 red, 13 blue; 15 blue, 4 red
Game 76: 1 green, 12 red, 13 blue; 5 green, 11 blue, 12 red; 10 red, 1 green; 10 red, 2 blue; 5 red, 2 green; 2 green, 17 blue, 3 red
Game 77: 2 blue, 1 red, 1 green; 7 red; 7 red, 3 blue, 2 green; 10 green, 1 red; 3 red, 7 blue, 6 green
Game 78: 10 red, 2 blue, 2 green; 1 blue, 6 red, 4 green; 12 red, 8 green; 6 green, 8 red, 7 blue; 11 green, 5 blue, 6 red
Game 79: 7 green, 5 red; 6 blue, 2 green, 15 red; 9 blue, 2 red, 12 green; 1 blue, 4 red, 10 green; 4 blue, 12 green, 11 red; 5 green, 3 red, 5 blue
Game 80: 1 green, 13 blue, 2 red; 2 red, 1 green, 13 blue; 7 blue, 8 red
Game 81: 1 green, 2 red, 11 blue; 5 red, 3 blue; 1 green, 1 red; 14 red, 1 green
Game 82: 12 red, 3 blue, 8 green; 15 red, 9 blue, 8 green; 6 blue, 13 red, 8 green
Game 83: 4 blue, 6 green, 3 red; 7 red, 2 blue, 9 green; 6 green, 3 red
Game 84: 4 green; 3 red, 3 blue; 4 red, 1 blue, 2 green; 1 red, 5 green, 5 blue; 1 red, 5 blue, 3 green
Game 85: 3 red, 4 blue, 15 green; 9 green; 2 red, 4 blue, 6 green; 1 red, 4 green, 7 blue; 3 red, 10 green, 9 blue; 1 red, 13 green, 3 blue
Game 86: 8 red, 6 blue; 3 blue, 3 green, 15 red; 12 red, 6 green, 13 blue; 15 red, 6 green, 10 blue
Game 87: 4 red, 4 blue; 6 red, 2 blue; 5 blue, 3 green; 4 blue, 2 red
Game 88: 4 blue, 7 green; 2 blue, 7 green; 6 green, 4 blue; 1 red, 1 blue, 2 green; 11 green, 3 blue
Game 89: 1 blue, 12 green, 11 red; 3 red, 7 blue, 1 green; 7 green, 8 red; 6 blue, 2 green, 3 red; 7 red, 8 green; 11 blue, 5 red, 12 green
Game 90: 1 green, 12 red, 17 blue; 14 red, 17 blue, 9 green; 6 green, 9 red, 11 blue
Game 91: 3 green, 14 blue; 2 blue, 2 green, 6 red; 1 red, 11 blue, 1 green; 3 green, 4 red, 20 blue; 6 red, 2 green, 3 blue; 10 blue, 12 red
Game 92: 6 blue, 7 red; 2 blue, 4 red, 1 green; 4 red, 1 green, 3 blue; 2 red, 5 blue; 8 red, 6 blue; 1 green, 2 blue, 1 red
Game 93: 4 blue, 1 green, 4 red; 8 red, 4 green, 4 blue; 2 blue, 9 red; 1 blue, 4 red; 4 blue, 2 green, 11 red
Game 94: 5 blue, 1 green, 7 red; 1 green, 11 blue, 1 red; 1 green, 15 blue, 4 red
Game 95: 1 red, 3 blue; 1 red, 1 green, 8 blue; 3 red, 1 green, 3 blue; 3 red, 6 blue; 6 blue
Game 96: 4 green, 1 blue; 7 green, 3 red; 2 blue, 9 red, 16 green; 3 blue, 4 red, 11 green
Game 97: 6 green, 8 blue; 1 blue, 1 green; 3 green, 4 blue; 8 blue, 5 green, 2 red
Game 98: 18 blue, 6 green; 11 green, 3 blue, 7 red; 18 blue, 3 red, 7 green; 5 red, 5 green; 8 blue, 2 green, 11 red
Game 99: 3 red, 2 green, 3 blue; 1 red, 4 green, 1 blue; 2 green, 18 red; 15 red, 1 blue; 2 blue, 9 red, 2 green; 17 red, 3 blue, 4 green
Game 100: 9 blue, 8 red, 16 green; 3 red, 7 green, 8 blue; 1 green, 3 red, 12 blue; 3 green, 14 blue
#+end_src


** Plan of attack


> The Elf would first like to know which games would have been possible if the bag
> contained only 12 red cubes, 13 green cubes, and 14 blue cubes?

So we could create a hashtable of all possible combinations of =12R,13G,14B=

If this happens to be a case where we need to store 10^10^10 items, we're out of luck.
#+begin_src emacs-lisp
  (defun expt (b n)
    (if (= n 0)
        1
      (* b (expt b (- n 1)))))

  (expt (expt 10 10) 10)
#+end_src

Realistically though, I think we can probably get (at least the initial) answer
by checking that none of the turns of the game contain any combinations of
selection that would exceed any of the limits.

So, more or less, we want to:

1. Read each line and parse the statements
2. Break each statement into it's constituent parts
3. Check that each part doesn't exceed the limits set by the problem description.

Lazy man's check:
+ greater than 14, impossible for any color
+ greater than 13, must be blue, else not possible
+ greater than 12, must be blue or green, else not possible


*** grammar for matching

So the following was my first attempt:

#+begin_src 
Game := GameID ":" Hand;
GameID := "Game" NUMBER

Hand := NUMBER color, Hand;
literal := NUMBER
color := ( "red" | "green" | "blue" )
#+end_src

On reflection, it looks like I might have constructed the grammar "up-side down".
I think a more simplified version would be more like this:

#+begin_src 
statement := id ":" game "\n" statement
game := turn ";" game
turn := "(\bgreen|blue|red\b\d+,?)+"
id := (Game\d)
#+end_src

So I think this means that we break down the input until we tokenize it into
two tokens: turn and id.

#+begin_src emacs-lisp
  (defconst d2/tokens '(turn id))
#+end_src

*** Functions to match atoms

#+begin_src python :tangle /tmp/aoc23-d2.py
  import copy
  import re

  games = [
      "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green",
      "Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue",
      "Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red",
      "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red",
      "Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green",
      ]

  def init_game(expr):
      "Initialize a game"
      if isinstance(expr, str):#
          _game = expr.replace(" ", "")
          id, game = _game.split(":")
          return id, game

  def init_turns(expr):
      "Initialize a list of turns of the game"
      res = expr.split(";")
      return res

  def match_hand(expr):
      """Extract the portion of the expression that matches a hand.
      Returns a set of groups containing all the matched hands.
      """
      patt = re.compile(r"(\d+)(green|blue|red)[,$]?")
      res = patt.findall(expr)
      if res:
          return res
      return None

  def match_game_id(expr):
      """Extract game id"""
      patt = re.compile(r"(Game)(\d+)")
      res = patt.findall(expr)
      if res:
          return res
      return None

  def tokenize(expr):
      _id, g = init_game(expr)
      id = match_game_id(_id)
      turns = init_turns(g)
      hands = [match_hand(t) for t in turns]
      return id, hands

  def is_valid_hand(hand):
      "Check that the colored cubes drawn within a hand are valid"
      RMAX = 12
      GMAX = 13
      BMAX = 14
      res = copy.deepcopy(hand)
      rval = hand["red"]
      gval = hand["green"]
      bval = hand["blue"]
      is_not_null = True
      if ((rval is None) and (gval is None) and (bval is None)):
          is_not_null = False
      if ((rval == 0) and (gval == 0) and (bval == 0)):
          is_not_null = False
      is_in_range = True
      if ((rval > RMAX) or (gval > GMAX) or (bval > BMAX)):
          is_in_range = False
      result = is_not_null and is_in_range
      return result


  def is_valid_game(game):
      "Check that the colored cubes drawn within a hand are valid"
      turns = []
      for h in game["hands"]:
          turns.append(h["valid"])
      result = all(turns)  # boolean check on all vals in list
      return result

  def eval(hands):
      """Check for the validity of each hand.
      Hands come in as ("number", "color") tuples
      """
      result = {}
      _hands = []
      _valid = []
      min_viable = {"green": 0, "blue": 0, "red": 0}
      for h in hands:  # process turns
          _turn = {"green": 0, "blue": 0, "red": 0}
          for x in h:
              val = int(x[0])
              key = x[1]
              _turn.update({key: val})
              if val > min_viable[key]:
                  min_viable[key] = val
          # any one invalid turn invalidates the game
          validity = is_valid_hand(_turn)
          _turn.update({"valid": validity})
          _hands.append(_turn)
      result.update({"hands": _hands})
      validity = is_valid_game(result)
      result.update({"valid": validity,
                     "min_viable": min_viable})
      return result

  def parse(line):
      "create a syntax tree for a line"
      result = {}
      id, hands = tokenize(line)
      result.update({"id": int(id[0][1])})
      _game = eval(hands)
      result.update({"game": _game})
      return result

  def power_mvset(mvset):
      "The power of red * green * blue cubes in set"
      result = mvset["green"] * mvset["blue"] * mvset["red"]
      return result

  def process_lines(lines):
      results = []
      for l in lines:
          results.append(parse(l))
      print(results)
      sum_valid = 0
      sum_power = 0
      for r in results:
          _game = r["game"]
          _mvset = _game["min_viable"]
          sum_power += power_mvset(_mvset)
          if _game["valid"]:
              sum_valid += r["id"]
      return sum_valid, sum_power

  def process(file):
      "Treat each line in a file as a game, evaluate and return sum of IDs"
      lines = []
      with open(file) as f:
          _lines = f.readlines()
          lines = [l.strip("\n") for l in _lines]
      sum_valid, sum_power = process_lines(lines)
      return sum_valid, sum_power

  if __name__ == '__main__':
      sv, sp = process("/tmp/aoc23-d2.txt")
      print("sum viable ids: ", sv)
      print("sum power min:  ", sp)
#+end_src

#+RESULTS:
: None

#+RESULTS: 2617


As a general plan for processing, we need to check against limits for the each
color dice.  =12 red, 13 green and 14 blue= are the limits. Note that the
regular expressions return the matches in descending order. If green was
present, the first match will be green, blue the second, red the third.

In order to avoid explicitly checking for the presence of each color on
every turn of the game, we could process the hands as we are 

** Part 2

The Elf says they've stopped producing snow because they aren't getting any
water! He isn't sure why the water stopped; however, he can show you how to get
to the water source to check it out for yourself. It's just up ahead!

As you continue your walk, the Elf poses a second question: in each game you
played, what is the fewest number of cubes of each color that could have been in
the bag to make the game possible?

Again consider the example games from earlier:

#+begin_src 
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
#+end_src

- In game 1, the game could have been played with as few as 4 red, 2 green, and
  6 blue cubes. If any color had even one fewer cube, the game would have been
  impossible.
- Game 2 could have been played with a minimum of 1 red, 3 green, and 4 blue
  cubes.
- Game 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.
- Game 4 required at least 14 red, 3 green, and 15 blue cubes.
- Game 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.

The power of a set of cubes is equal to the numbers of red, green, and blue
cubes multiplied together. The power of the minimum set of cubes in game 1
is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these
five powers produces the sum 2286.

For each game, find the minimum set of cubes that must have been present. What
is the sum of the power of these sets?

* Day 3: Gear Ratios

You and the Elf eventually reach a gondola lift station; he says the gondola
lift will take you up to the water source, but this is as far as he can bring
you. You go inside.

It doesn't take long to find the gondolas, but there seems to be a problem:
they're not moving.

"Aaah!"

You turn around to see a slightly-greasy Elf with a wrench and a look of
surprise. "Sorry, I wasn't expecting anyone! The gondola lift isn't working
right now; it'll still be a while before I can fix it." You offer to help.

The engineer explains that an engine part seems to be missing from the engine,
but nobody can figure out which one. If you can add up all the part numbers in
the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of
the engine. There are lots of numbers and symbols you don't really understand,
but apparently any number adjacent to a symbol, even diagonally, is a "part
number" and should be included in your sum. (Periods (.) do not count as a
symbol.)

Here is an example engine schematic:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..

In this schematic, two numbers are not part numbers because they are not
adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number
is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of
the part numbers in the engine schematic?


input

#+begin_src shell :tangle /tmp/aoc23-d3-input.txt
................................................965..583........389.................307.................512......................395.....387
........................#....374...382....250...*..........737*....*896.395...........*....................$.........................#......
..494.........532-...474......*.......#....*...................522......*..........%...........................%...+................269.....
.....*..#................506..143........375......77.....155...........400.518...64....773...718..797........694....972.603.....*...........
....479.795...............*..........800...........*.$.......264*636.......@..............&..*...*.......499...............*...5.20.........
515...................512.484...*....*...=......390...427...................................644.804.........*...@......-..532............28.
..........607...........&.....105...906...910.......@............979.969...........-..=.............462....414..101.361..........283$.......
..........*...781................................925..............=...*..........434..899....368.......*..................33...........*....
.......850.......=........559..249...................732.....430....132........................*.....................817-.=.........613.381.
....................157....*...&....978..............$......-...................*626.-.......297.............750............................
..........312...........606........*....136.............593.............638...........177.....................*....672.772....998.491=......
....450......*..156...............760.....=.......227......%..794...157........................919.......&....607..*...*....................
.......*...108...............968...................-..........*........*....80....669..........$..........854......6..572.....743....&......
......759.......649.............*832.......351.........433...418...997........*.....*.......46....187...........................*.....759...
............344.&..........&.........573......@...556.............*..........884...748..317../....+..........................236............
......#..................627.....334*..............*...933........774.534................*.......................................905........
...642.....105..........................100.......372.....$...........*..........*982..527....$837..406.948....*127......455........*.......
...........*.......383............293......*750.&.....774....630......51......826...........................361.........=.......993..822....
....*..576.346.876....@..907.953..@..............982..*.........+.................913*782...*115..565..526........779.......971.............
..20...*..........*.......*....%.............46-.......8................232................5.....................*....@........$........903.
.....$.............483.....420......115....$......287...............................873.......................131....818...............*....
......161....*362.....................-.266.........*......524...157.79....@.396.......*............848@.293............................988.
..........412...................................97..721.....#.......*...638../......305.......................+.................630*818.....
.194..................556....297.253...........*.........................................................@.....186..213..819................
................154.....$.......*....454......46.795.686.......=..204.........$...=............771.....171..........#................-456...
..................*.....................*........*.....-.....457.....*....638.466..579......................#..........109.....727..........
..................177......785.769...827..........500....168........479....*...........=....255..............74...........*845....*..375....
................-.........*.....*..........................*..............360..681......700.......................853...........781.....*...
..846..91......966........511.435.............245.......617.............*.....*....................................$.....810...........836..
.....*.................................%86......*..............121.......721..751......386*.......476*60...%195......801...%.......345......
..763........+....428@....-40.391...............970......803......=...*....................351...................185....*.....118...*.......
......#862..345....................629......45............+.........897.....802........488..........................*.....274.../..676../...
..945.............299.......$......*..........................183..................190...&........763.....484..364...235....%..........564..
...*..............*........404...527....&....137.814.......57......890.......407..*.........................*...*..............711&.........
....424..........66..................966.......*.@.........*......*......806...+........................98....762......$...663........605...
....................404......................614...489..........150....-..*........367...................*.........909.863...#........*.....
.............%759...*...+....916.498...&.............*.551..........191..606...............797........391.......................=568...898..
........2*........632.987......*....*.155.$2......412........................730...401.....#....438..........412*199........................
..........729...............89.753...........364.........687....................*.....*86........*.............................%.....657....
...............182./687.214.*.......................141..*....................$..620.......706%.368.....*.............758....694.971....*774
.....617........*.........*..335....89....583.........*..378...945.....272...97......................264.817.............*........*..+......
.../....*506.779...31..168..................*......732............*.../.....................957......................104.156...160..219.$...
....789.............*....../........671...45....................982.&.......%.......$.......*...264.............386..*..................588.
..................575.......192...../..................51*952.......264....655..=17..113...998.............932.......638..........24*.......
...........@............@.......................................#................................650..........*734...........652.....278....
........903.....=....805......944..............................377........477........&73.610.......+...640..........852.........*893........
.............882.........@768..%..103........465......636.............................................*..........29...*.661.295......61.....
.....................467.........$......292...*.........&..........640.......926.........201..173...38...........*..805.*.............*.....
......296....317.......*.....995............$.889..890....665.......*....47..@....701&..$.......$......739....388.......257............790..
..989..*.....&....980..168.....*...........17........*.....*.......894..*.........................*200.*....................................
..../...561....................198.34*811......726.122...+.63..437......787.........668........355.......641....@...........................
.................................................*.....112.....*................798*.......420..........*........244..758..............771..
...&.......573..............515..................252........511......................396...%.......805.736............/..........546........
342.......*....................*.44.................................*....399.188.....*........................254........13*................
........%..720.............695......875*362.........@...649*919..585.477...*..*...245....450....-............*.......743....645.&......796..
.....556.........460.........$..............919&....679...................935.............*...273.........396.........*..........659........
...&.............-.........%.....542*...............................................255.368........387..............435..612*...............
980................484...964.........736........%327.......210..+......962.610...............396.............492.............259.970*.......
....-.......850...............645...........56.........275*.....928.....*.....-..81....133........=..889....*........................382....
..382................419*.......*......@......*.............439........953.......*....*..........341..*..322.....226.342.......*598.........
...............636=......662.204........620..13..............*...171..............19..396............27.............*.......539........278..
.........131.........133........................282...900...48...*........678.379................+.....................798.......131....@...
.....684*.....944.......*...@.....991...................*.........90.......*..+...818.783....19..492...501*842..........*..480*..@..........
..........515..........855...646.+.......451.../533.....115...../.........841.................#........................272...........154....
....107=..*................................&..........=.......631.....837.............52..............485......193.%.......983......*.......
..........587............405*329....957............451............60.*............370......................222..*...461....@.......894..534.
..705...............131...............$...640...............127*8.+..859.145.......%...440...%..................875.........................
...*..714....783..........@986......&........*.........................................*...199.451....=.....................87.......190....
.349..*......%.....429...............602..562..519................=......112*....669....8..............105...........#......../..387........
.....792.............*.......854..............*.................93...........808...$...........%673........802$.......586..........*........
.............-.......282.....+...-756.......291.........&...............................209.......................534.......573.831....*955.
..........195............401..........617.............676.........................................961..716...................*..............
.....762................*.......*864.........%694..............249./....-....572.327..........784..*..........@.534........883.........724..
......%..............#...109.304....................................56...240.*...*......657...%....837..792.292...=...............*.........
...................974..............89..............629....#460..............330.....*....*..............*................620#...887........
...877*793..................680+...*........$662...*..............................365.898..773.........726...........607.............579....
.................................316.404...........716.....*775.....%.........................................573.67.#...399.953......*.....
.......931...................91@.....*.........680.....395.......760......165....302............960....*.........*.......*.........697......
.......*......962..997/.............363.....*....*....@....126........566*........$..4..739*..........545.953.............955...............
....548.........%................./.....*.734.....653.....*...........................#.....489..............*....336.763...................
........@.185........88.........483...208......-..........419..331......460.../46.406.......................582.-....*..........408.........
.....106../......654..*.....................423.......109.........*................*............269..%21.........632.....324+......*...*....
................%....265......906....926.............*............475..60........188...............*.............................994..905...
........=781....................*....*.....938....401.......857.......*.......................802.300..625.....207..%.......................
..................355..894...410....402...*...................*.....467................660*..*.........%.......*....721.....&....764........
...........554...*.......*..............277..-.......648.......491..........................968...........24....380......520....*...........
......%....*.....757......788.................851......*...416.....493........635....241.........409.....*..........362......660............
.......23..52..........@............................791.....*......+...=..*.........../...$209...*......282..214...=....370.................
...................328..291.529.........................50.63........412.591..../..............169........................+........+........
..701&....=..198.....*.........*....+...........896......$..../................772......*626........458..578=...............337..95...482...
.......540...&......989....227..736.229.....................52...........241..........95.............*..................599...*......*......
........................................820.397................937...664*...............................820...222.185...*.....47....862..192
...........................$.....484.....*..$.......$601........*...............540.........&.............*..............694................
.....818.630..........15..495...........119...36.........273.....329..=.398....*...........578....220...607..580.......%.......876..........
.....*........=......*...................................*...........30..=......89..........................*.......182....574.$............
...98...127....182.363..921..............................273.........................................@231..926...............=....=18.......
........&.................................183........7@.......................347=.....=......903....................*732..............782..
.............*635............................%.604*.........@.#910.226...............288..........767.............227............753/..*....
770.......661............812...$709..430...........997....556......*.....................@...970...........949..........................775.
............................................984.....................845.......$........861.......297..415.*...............789..*937.........
..541.......614..10.........453.....................67.....................735...../..............*..*.......................*..............
...%.../....*..........468...=........*824.109........*58............318............29.....152..538.488.....423.......19......602...162.....
......279.363.228........*.........221.............&.......*..................................@................*788....*...........*........
706....................114..............&987.873..316...701.871.....846...501......200.603..........876.................929......178........
...*..503.......78.................................................-......*..........*............+.........179......$......................
.850.....$..118...+.............944..........19.............@735..........388..160...365..582....524..........*.......355.....840...........
..............*......*..........=...475+.926*.....433.............../146.......*..............................380.....................614...
...........228....200.695..........................*..391..529..................918...290...340..16*.....482................363.........$...
.......906......................993......=986...874...*...#....+............37...........*....=...........#...................*.....32......
...&......*230..204=........721...*.$...............839.....456..553..601..*...408.....914..................77.................662..*..=554.
...29.......................*...717.248.....358.................@......$...977...*................94.....................*846...............
.............542..546.....52.................*........286........................669......................=...401......61.....709*389.480...
........989......*....253....713.........742..171.........325....976....*...513/....................967.246....*........................*...
...........=....571...*........-..=456.....................*........*..300.......344..........146..............87........................66.
..199*................204..............+.490.......584...427.166...810.....431......+...115....*..........195...........=...................
......247.645....................693.204....-.....*....................310...*..*........*.....772....686*.........=323.194....451......=...
.....................596.304*696.@....................................*....220...351..444..934..................................+........136
..736...............&..................................510..250..638.766..................*....511....195.........#..778..&902....721.......
...........758............*..........=401......210..#.....&.-...*................572...385....*.......%.....200.248.*..............*........
...........*...........991.358.256.........782*......742.........832....*.......=..........799...675*......*.........80.819.902...18........
...........735...*.............*........*.......*242.....414*704.....194..325...........................569..............$...@..............
..................772.......309...+..204.....659.....&.....................*............297*..396*494.......26......................131.....
.....%..+.......................169...................860..333...212*....459.............................../.......392.............@.....103
....628..891....../....519..88............................*..........530......90*....225.418....112....614....274..$......169%.399...481....
850............829..48..%.........931........./388.......270..............@......798......#........@....*........$...............-..*.......
...*876...............*...820.....*............................614*834...745............................575..................-......827.....
......................764....*..432...........516$.133..633..................489$........396.255.............636..413*.811....337.......*682
.667......................639...........199..........*...+......=....*500.........401@......*...........878-..*........../...........419....
....@......28...........................*...#....@..72.......539..708........237.................=............675.851@......................
.......777........406...459$..........993.445.719......./......................+...706........386....%....../..................*96.271......
.311..*.......................&......................317../542....................@.....+.........136......821.543..........947.............
...*..982.....657..70=..948#..159..777../.....757....................816...............887.............325........*....................871..
.804..........=.....................*..284..........255*...............+....48...589*......199................#.68..542......&.&241...*.....
.......10............604.....287...66......507..........917...585............-.......6.327..-......822.....718.....*.......825.......34.....
........*......904$....*..................+......*.............*.....454.820............@.....492.*................887............@.........
.......645.-.........49..............844.........533........958.........*.......32.892..........%.118...+..670*296......%...122..840.230....
....=......176..........................*.=..........................%1.....397*...........820.........407...............21...........*.....
...913...........&............408.....135.300..............775...993.........................@..............%.....272...........*626...101..
..................95..505......*.................581.........+...*...........59*23.......449.......964...657.......*..........75............
.............................87...622..........................822...............................................215.............810........
#+end_src


